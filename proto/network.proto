syntax = "proto3";

package network.v1;

option go_package = "./;protos";

message GetNetworksRequest {}

message GetNetworkResponse {
  string id = 1;
  string name = 2;
  string created = 3;
  string scope = 4;
  string driver = 5;
  bool internal = 6;
  bool attachable = 7;
  bool ingress = 8;
  map<string, string> labels = 9;
}

message GetNetworksResponse {
  repeated GetNetworkResponse networks = 1;
}

message GetNetworkDetailsRequest {
  string id = 1;
}

message GetNetworkDetailsResponse {
  string id = 1;
  string name = 2;
  string created = 3;
  string scope = 4;
  string driver = 5;
  bool internal = 6;
  bool attachable = 7;
  bool ingress = 8;
  map<string, string> labels = 9;
}

message CreateNetworkRequest {
  string name = 1;
  string driver = 2;
  string subnet = 3;
  string gateway = 4;
  bool internal = 5;
  bool attachable = 6;
  bool ingress = 7;
  map<string, string> labels = 8;
}

message CreateNetworkResponse {
  string id = 1;
}

message ConnectNetworkRequest {
  string network_id = 1;
  string container_id = 2;
  EndpointSettings settings = 3;
}

message EndpointSettings {
  string ip_address = 1;
  repeated string aliases = 2;
  string mac_address = 3;
}

message ConnectNetworkResponse {
  bool success = 1;
}

message DisconnectNetworkRequest {
  string network_id = 1;
  string container_id = 2;
  bool force = 3;
}

message DisconnectNetworkResponse {
  bool success = 1;
}

message PruneNetworksRequest {
  string all = 1;
}

message PruneNetworksResponse {
  repeated string networks_deleted = 1;
}

message RemoveNetworkRequest {
  string id = 1;
}

message RemoveNetworkResponse {
  bool success = 1;
}

service NetworkService {
  rpc GetNetworks(GetNetworksRequest) returns (GetNetworksResponse);
  rpc GetNetworkDetails(GetNetworkDetailsRequest) returns (GetNetworkDetailsResponse);
  rpc CreateNetwork(CreateNetworkRequest) returns (CreateNetworkResponse);
  rpc ConnectNetwork(ConnectNetworkRequest) returns (ConnectNetworkResponse);
  rpc DisconnectNetwork(DisconnectNetworkRequest) returns (DisconnectNetworkResponse);
  rpc PruneNetworks(PruneNetworksRequest) returns (PruneNetworksResponse);
  rpc RemoveNetwork(RemoveNetworkRequest) returns (RemoveNetworkResponse);
}
