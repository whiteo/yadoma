plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'com.google.protobuf' version '0.9.5'
}

group = 'dev.whiteo'
version = '0.1'
description = 'yadoma webapp service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    fastjsonVersion = '2.0.59'
    lombokVersion = '1.18.42'
    lombokMapstructBindingVersion = '0.2.0'
    mapstructVersion = '1.6.3'
    jjwtVersion = '0.13.0'
    springdocOpenapiVersion = '2.8.13'
    flapdoodleVersion = '4.21.0'
    protobufVersion = '4.32.1'
    grpcVersion = '1.76.0'
}

dependencies {
    // === Spring Boot ===
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-security"
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    // === FastJSON ===
    implementation "com.alibaba.fastjson2:fastjson2:${fastjsonVersion}"

    // === Lombok ===
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    // === MapStruct ===
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // === JWT ===
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    // === OpenAPI ===
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocOpenapiVersion}"

    // === Embedded MongoDB ===
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:${flapdoodleVersion}"

    // === Protobuf runtime ===
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"

    // === gRPC runtime ===
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

bootJar {
    archiveFileName = 'yadoma.jar'
}

generateProto {
    outputs.dir("$projectDir/build/generated")
}

clean {
    delete "$projectDir/build/generated"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    outputSubDir = 'java'
                }
            }
            task.plugins {
                grpc {
                    outputSubDir = 'java'
                }
            }
        }
    }
}

sourceSets {
    main {
        proto {
            srcDirs = ['../proto']
        }
        java {
            srcDirs += "$projectDir/build/generated/source/proto/main/java"
        }
    }
}